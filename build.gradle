plugins {
    id 'java-library'
    id 'maven'
    id 'maven-publish'
    id 'pl.allegro.tech.build.axion-release' version '1.10.0'
    id "com.jfrog.bintray" version "1.8.5"
}

repositories {
    maven { url 'http://repo.bodar.com/' }
    mavenCentral()
}

group = 'com.github.nickmcdowall'
sourceCompatibility = '11'
project.version = scmVersion.version

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['MyPublication']
    pkg {
        repo = 'nkm'
        name = 'yatspec'
        override = false
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/nickmcdowall/yatspec.git'
        publish = true
        publicDownloadNumbers = true
        issueTrackerUrl = 'https://github.com/nickmcdowall/yatspec/issues'
        version {
            released = new Date()
            name = project.version
            mavenCentralSync {
                user = System.getenv('SONATYPE_USER')
                password = System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
}

ext {
    junitJupiter = '5.3.2'
    junitPlatformVersion = '1.3.2'
}

configurations {
    inFatJar
}

// Add non-maven-central dependencies to jar (fat jar)
jar {
    from {
        configurations.inFatJar.collect {
            zipTree(it)
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

dependencies {
    inFatJar "com.googlecode.funclate:funclate:110"
    implementation "com.googlecode.funclate:funclate:110"
    implementation "io.cucumber:cucumber-spring:4.8.0"
    implementation "org.springframework:spring-context:5.2.6.RELEASE"

    api "net.sourceforge.plantuml:plantuml:1.2020.9"
    api "antlr:antlr:2.7.7"
    api "org.antlr:stringtemplate:3.2.1"
    api "com.thoughtworks.qdox:qdox:1.12.1"
    api "jaxen:jaxen:1.1.1"
    api "org.jdom:jdom:1.1"
    api "org.junit.jupiter:junit-jupiter-api:$junitJupiter"
    api "org.junit.jupiter:junit-jupiter-params:$junitJupiter"
    api "org.junit.jupiter:junit-jupiter-engine:$junitJupiter"
    api "org.hamcrest:hamcrest-library:1.3"

    testCompile 'org.mockito:mockito-core:3.4.4'
    testCompile 'org.assertj:assertj-core:3.15.0'

    implementation "org.apache.commons:commons-lang3:3.11"
    implementation "org.jtwig:jtwig-core:5.87.0.RELEASE"
}

// Remove non-maven-central dependencies from generated pom (bundled in jar)
install.repositories.mavenInstaller.pom.whenConfigured { pom ->
    pom.dependencies.removeAll {
        dep -> dep.groupId ==~ /com\.googlecode.*/
    }
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

test {
    systemProperty "yatspec.output.dir", "$buildDir/reports/yatspec"
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

wrapper {
    gradleVersion = "5.3"
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Nick"
            email "nicholas.mcdowall@gmail.com"
            organization 'NKM IT Solutions'
            organizationUrl 'https://github.com/nickmcdowall'
        }
    }
    scm {
        url "https://github.com/nickmcdowall/yatspec.git"
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId "$group"
            artifactId 'yatspec'
            version "${scmVersion.version}"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Yatspec living sequence diagrams')
                root.appendNode('name', 'yatspec')
                root.appendNode('url', 'https://github.com/nickmcdowall/yatspec.git')
                // remove libraries in fatJar (until we can remove the dependency on them)
                root.dependencies.'*'.findAll() {
                    it.artifactId.text() == 'funclate'
                }.each() {
                    it.parent().remove(it)
                }
                root.children().last() + pomConfig
            }
        }
    }
}